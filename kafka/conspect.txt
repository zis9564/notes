		
		PRODUCER---(a)--->TRANSACTION COORDINATOR
		   /|\ 			  /			|
		  /(c)\			 /		   (b)
		 v  v  v		/ 			v
		DATA LOGS	  (d)	TRANSACTION LOG
		m0  m2  m3	  /	 	- init(id)
		m1  c   m4	 /		- t.id -> ongoing
		c       m5 <-		- t.id -> prepare
		        c 			- t.id -> committed

TRANSACTION COORDINATOR --- модуль в каждом брокере. каждому координатору принадлежит N разделов в transaction log разделы, для которых
						брокер является лидером.
TRANSACTION LOG ----------- внутренний топик kafka где хранится только последнее состояние транзакции и связанные метаданные
transactional.id ---------- сопоставляется с определенным разделом transaction log функцией хеширования т.е. каждый transactional.id
							принадлежит только одному координатору

поток данных можно разбить на четыре различных типа.
	(a) во время транзакции PRODUCER связывается с TRANSACTION COORDINATOR в следующих точках:
		1 -> в момент инициализации tr: регистрируется tr.id, все трансакции с тем-же tr.id закрываются, увеличивается epoch.
		2 -> перед первой отправкой данный в tr
		3 -> когда приложение commit или abort tr: запрос на вторую фазу протокола зваершения.
	(b) взаимодействие TRANSACTION COORDINATOR и TRANSACTION LOG:
		по мере выполнения tr PRODUCER отправляет запросы (1-3) в TRANSACTION COORDINATOR, он в свою очередь сохраняет состояние каждой транзакции в TRANSACTION LOG.
		TRANSACTION COORDINATOR - единственный компонент, который может читать и записывать в TRANSACTION LOG. если брокер почил, избирается новый и чтение/запись в TRANSACTION LOG продолжается.
	(c) после регисрации новых partitions в TRANSACTION COORDINATOR, PRODUCER сохраняет данные в partitions как обычно.
	(d) после того как PRODUCER инициирует commit/abort TRANSACTION COORDINATOR начинает вторую стадию протокола commit.
		на первом этапе TRANSACTION COORDINATOR обновляет внутренний статус tr до prepare_commit и обновляет TRANSACTION LOG
		на втором этапе TRANSACTION COORDINATOR записывает маркеры во все partitions участвующие в tr. эти маркеры используются для consumers в режиме read_committed чтобы отфильтровать сообщения из прерванных tr и сообщений из открытых tr.
		после того как маркеры записаны - TRANSACTION COORDINATOR записывает в TRANSACTION LOG commited, после чего PRODUCER может открывать новую tr.