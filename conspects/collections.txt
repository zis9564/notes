COLLECTIONS:

Коллекция - это структура данных, набор однотипных объектов.

JAVA COLLECTION FRAMEWORK:
    в своей основе содержит 2 интерфеса:
    - Collection - для простых последовательных наборы элементов
    - Map - для пар ключ-значение.

COLLECTION INTERFACE:
    расширяется интерфесами и имеет следующие реализации:
    - List
        - ArrayList
        - LinkedList
        - Vector
        - Stack (LIFO)
    - Set
        - HashSet
        - LinkedHashSet
        - TreeSet
    - Queue (FIFO)
        - PriorityQueue
        - ArrayDeque

    ArrayList
        коллекция разрешает хранить дубликаты
        коллекция в основе лежит массив, а значит требует непрерывного диапазона ячеек памяти
        динамически изменяет размер.
        имеет константное время доступа к любой ячейки массива.
    LinkedList
        коллекция разрешает хранить дубликаты
        двунаправленный связный список
        имплементирует интерфейсы List и Deque
        каждый элемент хранит не только информацию, но и ссылку на след и пред элементы
        имеет линейное время O(n) доступа к любой ячейки массива.
        следует использовать когда нужно добавлять и удалять значения в любом месте массива.
    Vector
        старая имплементация List
        syncronized, но не является полностью потокобезопасным (синхронизирует операции, но не полностью экземпляр) и имеет deprecated методы.
    Stack
        реализует стандартный стек last-in first-out.
        наследуется от класса Vector
    HashSet
        не поддерживает дубликатов (дубликат не будет добавлен)
        не поддерживает удаление по индексу
        не гарантируется порядок элементов при добавлении.
        под капотом использует HashMap для хранения данных.
        в качестве ключа и значения используется добавляемый элемент.
        позволяет добавлять, удалять и искать элементы за O(1).
    LinkedHashSet
        гарантирует порядок элементов по порядку их добавления.
        вставка, удаление, и поиск элементов происходит за O(1) в худшем случае O(n)
    TreeSet
        есть возможность управлять порядком элементов при помощи Comparator,
        по умолчанию сохраняет элементы с использованием «natural ordering».
        позволяет добавлять, удалять и искать элементы за O(logN).
    PriorityQueue
        реализует принцип first in first out.
        не поддерживает NULL
        не поддержиает элементы не имплементирующие интерфейс Comparable
        не является потокобезопасным. потокобезопасный вариант - PriorityBlockingQueue
        используется, когда нужно обрабатывать элементы в зависимости от их приоритетности
        сохраняет элементы с использованием «natural ordering» или custom компаратора
        главой является наименьший элемент по отношению к указанному порядку.
        Если несколько элементов привязаны к наименьшему значению, голова является произвольным элементом.
        скорость чтения и записи O(log(n)).
    ArrayDeque
        динамически resizable массив, позволяющий добавлять и удалять элементы с обоих концов
        не поддерживает NULL
        не является потокобезопасным
        имплементирует интерфейсы Queue и Dequeue
        быстрее чем Stack когда используется как Stack
        быстрее чем LinkedList когда используется как Queue

MAP INTERFACE:
    - HashTable
    - HashMap
    - LinkedHashMap
    - TreeMap
    - WeakHashMap

    HashTable
        потокобезопасна
        не поддерживает NULL в качестве ключа и значения.
        является deprecated
    HashMap
        не является потокобезопасной
        поддерживает NULL в качестве ключа и в качестве значения.
    LinkedHashMap
        наследуется от HashMap
        не является потокобезопасной
        поддерживает порядок добавления элементов
    TreeMap
        поддерживает сортировку по компаратору или натуральный порядок
        не является потокобезопасной
        не поддерживает NULL в качестве ключа
    WeakHashMap
        тоже самое что hashmap но с одним отличием. если ключ не содержит значений, сборщик мусора может удалить ключ.
        сборщик мусора доминирует над WeakHashMap